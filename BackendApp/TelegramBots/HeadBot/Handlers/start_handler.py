from telebot import types
import re

from BackendApp.Database.session import DBTransactionStatus
from BackendApp.Logger import LogLevel, logger
from BackendApp.Middleware.client_middleware import ClientMiddleware
from BackendApp.TelegramBots.HeadBot.Config import bot
from BackendApp.TelegramBots.HeadBot.Middlewares.message_context_middleware import message_context_manager
from BackendApp.TelegramBots.HeadBot.Handlers.main_menu_handler import main_menu
from BackendApp.TelegramBots.HeadBot.Handlers.referrals_handler import (
    handle_referral_link,
)
from BackendApp.TelegramBots.HeadBot.Handlers.support_handler import process_reservation_request

from telebot.asyncio_handler_backends import StatesGroup
from telebot.asyncio_handler_backends import State

from BackendApp.TelegramBots.utils.handler_loggining import handler_logging

class RegistrationStates(StatesGroup):
    PhoneInquiry = State()

REFERRAL_LINK = 1
CALLBACK_DATA = 1

@handler_logging
@bot.message_handler(commands=["start"])
async def welcome_handler(message) -> None:
    await message_context_manager.delete_msgId_from_help_menu_dict(chat_id=message.chat.id)
    await _start_message(message)

@handler_logging
@bot.message_handler(commands=["home"])
async def home_handler(message):
    try:
        result = await ClientMiddleware.get_client(chat_id=message.chat.id)
        if (result == DBTransactionStatus.NOT_EXIST):
            msg = await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –í—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>/start</b>.",
                parse_mode="HTML"
            )
            message_context_manager.add_msgId_to_help_menu_dict(chat_id=message.chat.id, msgId=msg.id)
        else:
            await main_menu(message)
    
    except Exception as e:
        logger.log(
            level=LogLevel.ERROR, 
            message=f"An error occurred in start_handler.py in home_handler function: {e}",
            module_name="head_bot"
        )

@handler_logging
async def _start_message(message):
    try:
        result = await ClientMiddleware.get_client(chat_id=message.chat.id)
        payload = [element for element in message.text.split(" ")]

        if (result == DBTransactionStatus.NOT_EXIST):
            msg = await bot.send_message(
                chat_id=message.chat.id,
                text="<i>–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</i>",
                parse_mode="HTML"
            )

            message_context_manager.add_msgId_to_help_menu_dict(
                chat_id=message.chat.id,
                msgId=msg.id
            )

            result = await ClientMiddleware.create_client(
                chat_id=message.chat.id,
                username=message.chat.username,
                first_name=message.chat.first_name,
                last_name=message.chat.last_name,
            )

            await message_context_manager.delete_msgId_from_help_menu_dict(chat_id=message.chat.id)

            if result == DBTransactionStatus.ROLLBACK:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                )
                message_context_manager.add_msgId_to_help_menu_dict(
                    chat_id=message.chat.id,
                    msgId=msg.id
                )

            elif (result == DBTransactionStatus.SUCCESS):
                # link_example: t.me/<bot_name>?start=referal_<referral_number>
                if (len(payload) > 1):
                    if "referal_" in payload[REFERRAL_LINK]:
                        referral_link = payload[REFERRAL_LINK].split("referal_")[1]
                        await handle_referral_link(message=message, referral_link=referral_link)

                await phone_inquery_menu(message)

        else:
            if (len(payload) > 1):
                if "support_reserve_update" in payload[CALLBACK_DATA]:
                    # t.me/crm_head_test_bot?start=support_reserve_update_cancel_capacity_1_date_2024_18_05_23_00
                    capacity = payload[CALLBACK_DATA].split("_capacity_")[-1].split("_date_")[0]
                    date_and_time = payload[CALLBACK_DATA].split("_capacity_")[-1].split("_date_")[1].split("_")
                    date = "-".join(date_and_time[:3])
                    time = ":".join(date_and_time[3:])
                    reservation_time = date + " " + time

                    await process_reservation_request(message, capacity, reservation_time, "update")
                
                elif "support_reserve_cancel" in payload[CALLBACK_DATA]:
                    # t.me/crm_head_test_bot?start=support_reserve_cancel_capacity_1_date_2024_18_05_23_00
                    capacity = payload[CALLBACK_DATA].split("_capacity_")[-1].split("_date_")[0]
                    date_and_time = payload[CALLBACK_DATA].split("_capacity_")[-1].split("_date_")[1].split("_")
                    date = "-".join(date_and_time[:3])
                    time = ":".join(date_and_time[3:])
                    reservation_time = date + " " + time

                    await process_reservation_request(message, capacity, reservation_time, "cancel")

                elif "support_reserve" in payload[CALLBACK_DATA]:
                    # t.me/crm_head_test_bot?start=support_reserve_capacity_1_date_2024_18_05_23_00
                    capacity = payload[CALLBACK_DATA].split("_capacity_")[-1].split("_date_")[0]
                    date_and_time = payload[CALLBACK_DATA].split("_capacity_")[-1].split("_date_")[1].split("_")
                    date = "-".join(date_and_time[:3])
                    time = ":".join(date_and_time[3:])
                    reservation_time = date + " " + time

                    await process_reservation_request(message, capacity, reservation_time, "create")
                else:
                    await main_menu(message)
            else:
                await main_menu(message)
    except Exception as e:
        logger.log(
            level=LogLevel.ERROR, 
            message=f"An error occurred in start_handler.py in _start_message function: {e}",
            module_name="head_bot"
        )

@handler_logging
async def phone_inquery_menu(message):
    try:
        await message_context_manager.delete_msgId_from_help_menu_dict(chat_id=message.chat.id)

        msg = await bot.send_message(
            chat_id=message.chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>+7xxxxxxxxxx</b>. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —á–µ–∫–æ–≤ ü§ó",
            reply_markup=types.InlineKeyboardMarkup(
                row_width=1,
                keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üìû –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                            callback_data="main_menu"
                        )
                    ]
                ]
            ),
            parse_mode="HTML" 
        )

        message_context_manager.add_msgId_to_help_menu_dict(
            chat_id=message.chat.id,
            msgId=msg.id
        )
        await bot.set_state(message.chat.id, RegistrationStates.PhoneInquiry)

    except Exception as e:
        logger.log(
            level=LogLevel.ERROR, 
            message=f"An error occurred in review_handler.py in get_review_award function: {e}",
            module_name="head_bot"
        )

@handler_logging
@bot.message_handler(state=RegistrationStates.PhoneInquiry)
async def phone_inquery_proceed_menu(message):
    try:
        await message_context_manager.delete_msgId_from_help_menu_dict(
            chat_id=message.chat.id
        )
        phone = message.text
        pattern = r"\+7\d{10}"

        if (re.match(pattern, phone)):
            result = await ClientMiddleware.update_phone(
                chat_id=message.chat.id,
                phone=phone
            )
            if (result == DBTransactionStatus.SUCCESS):
                msg = await bot.send_message(
                    chat_id=message.chat.id,
                    text="–í—ã —É—Å–ø–µ—à–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–Ω –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é",
                    reply_markup=types.InlineKeyboardMarkup(
                        row_width=1,
                        keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üîú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                                    callback_data="main_menu"
                                )
                            ]
                        ]
                    )
                )
                message_context_manager.add_msgId_to_help_menu_dict(
                    chat_id=message.chat.id,
                    msgId=msg.id
                )
            else:
                msg = await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    reply_markup=types.InlineKeyboardMarkup(
                        row_width=1,
                        keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üîú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                                    callback_data="main_menu"
                                )
                            ]
                        ]
                    )
                )
                message_context_manager.add_msgId_to_help_menu_dict(
                    chat_id=message.chat.id,
                    msgId=msg.id
                )
                await bot.delete_state(message.chat.id, message.chat.id)
        
        else:
            msg = await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É <b>+7xxxxxxxxxx</b>: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞",
                    reply_markup=types.InlineKeyboardMarkup(
                        row_width=1,
                        keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üîú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                                    callback_data="main_menu"
                                )
                            ]
                        ]
                    ),
                    parse_mode="HTML"
                )
            message_context_manager.add_msgId_to_help_menu_dict(
                chat_id=message.chat.id,
                msgId=msg.id
            )
    except Exception as e:
        logger.log(
            level=LogLevel.ERROR, 
            message=f"An error occurred in start_handler.py in phone_inquery_proceed_menu function: {e}",
            module_name="head_bot"
        )
